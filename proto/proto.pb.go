// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: proto.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_proto_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{0}
}

type ServerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerStatus          []int64  `protobuf:"varint,1,rep,packed,name=server_status,json=serverStatus,proto3" json:"server_status,omitempty"`
	ContactServerStatus   []string `protobuf:"bytes,2,rep,name=contact_server_status,json=contactServerStatus,proto3" json:"contact_server_status,omitempty"`
	ByzantineServerStatus []int64  `protobuf:"varint,3,rep,packed,name=byzantine_server_status,json=byzantineServerStatus,proto3" json:"byzantine_server_status,omitempty"`
}

func (x *ServerStatus) Reset() {
	*x = ServerStatus{}
	mi := &file_proto_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatus) ProtoMessage() {}

func (x *ServerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatus.ProtoReflect.Descriptor instead.
func (*ServerStatus) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{1}
}

func (x *ServerStatus) GetServerStatus() []int64 {
	if x != nil {
		return x.ServerStatus
	}
	return nil
}

func (x *ServerStatus) GetContactServerStatus() []string {
	if x != nil {
		return x.ContactServerStatus
	}
	return nil
}

func (x *ServerStatus) GetByzantineServerStatus() []int64 {
	if x != nil {
		return x.ByzantineServerStatus
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Sender    int32   `protobuf:"varint,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver  int32   `protobuf:"varint,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Amount    float32 `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Result    bool    `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_proto_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{2}
}

func (x *Transaction) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Transaction) GetSender() int32 {
	if x != nil {
		return x.Sender
	}
	return 0
}

func (x *Transaction) GetReceiver() int32 {
	if x != nil {
		return x.Receiver
	}
	return 0
}

func (x *Transaction) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transaction) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type TransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txn          *Transaction `protobuf:"bytes,1,opt,name=txn,proto3" json:"txn,omitempty"`
	SignatureTxn []byte       `protobuf:"bytes,2,opt,name=signature_txn,json=signatureTxn,proto3" json:"signature_txn,omitempty"`
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	mi := &file_proto_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{3}
}

func (x *TransferRequest) GetTxn() *Transaction {
	if x != nil {
		return x.Txn
	}
	return nil
}

func (x *TransferRequest) GetSignatureTxn() []byte {
	if x != nil {
		return x.SignatureTxn
	}
	return nil
}

type TransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *TransactionResponse) Reset() {
	*x = TransactionResponse{}
	mi := &file_proto_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResponse) ProtoMessage() {}

func (x *TransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResponse.ProtoReflect.Descriptor instead.
func (*TransactionResponse) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransactionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PreprepareMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack         bool             `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	View        int32            `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	SeqNum      int32            `protobuf:"varint,3,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	Digest      string           `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
	Txn         *TransferRequest `protobuf:"bytes,5,opt,name=txn,proto3" json:"txn,omitempty"`
	RequestType string           `protobuf:"bytes,6,opt,name=requestType,proto3" json:"requestType,omitempty"`
}

func (x *PreprepareMessage) Reset() {
	*x = PreprepareMessage{}
	mi := &file_proto_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreprepareMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreprepareMessage) ProtoMessage() {}

func (x *PreprepareMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreprepareMessage.ProtoReflect.Descriptor instead.
func (*PreprepareMessage) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{5}
}

func (x *PreprepareMessage) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (x *PreprepareMessage) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *PreprepareMessage) GetSeqNum() int32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *PreprepareMessage) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *PreprepareMessage) GetTxn() *TransferRequest {
	if x != nil {
		return x.Txn
	}
	return nil
}

func (x *PreprepareMessage) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

type PrepareMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack       bool   `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	SenderId  int32  `protobuf:"varint,2,opt,name=senderId,proto3" json:"senderId,omitempty"`
	View      int32  `protobuf:"varint,3,opt,name=view,proto3" json:"view,omitempty"`
	SeqNum    int32  `protobuf:"varint,4,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	Digest    string `protobuf:"bytes,5,opt,name=digest,proto3" json:"digest,omitempty"`
	Signature []byte `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PrepareMessage) Reset() {
	*x = PrepareMessage{}
	mi := &file_proto_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareMessage) ProtoMessage() {}

func (x *PrepareMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareMessage.ProtoReflect.Descriptor instead.
func (*PrepareMessage) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{6}
}

func (x *PrepareMessage) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (x *PrepareMessage) GetSenderId() int32 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *PrepareMessage) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *PrepareMessage) GetSeqNum() int32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *PrepareMessage) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *PrepareMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type PrepareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack         bool             `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	View        int32            `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	SeqNum      int32            `protobuf:"varint,3,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	Digest      string           `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
	Certificate map[int32][]byte `protobuf:"bytes,5,rep,name=certificate,proto3" json:"certificate,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PrepareResponse) Reset() {
	*x = PrepareResponse{}
	mi := &file_proto_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareResponse) ProtoMessage() {}

func (x *PrepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareResponse.ProtoReflect.Descriptor instead.
func (*PrepareResponse) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{7}
}

func (x *PrepareResponse) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (x *PrepareResponse) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *PrepareResponse) GetSeqNum() int32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *PrepareResponse) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *PrepareResponse) GetCertificate() map[int32][]byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type CommitMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack       bool   `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	SenderId  int32  `protobuf:"varint,2,opt,name=senderId,proto3" json:"senderId,omitempty"`
	View      int32  `protobuf:"varint,3,opt,name=view,proto3" json:"view,omitempty"`
	SeqNum    int32  `protobuf:"varint,4,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	Digest    string `protobuf:"bytes,5,opt,name=digest,proto3" json:"digest,omitempty"`
	Signature []byte `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *CommitMessage) Reset() {
	*x = CommitMessage{}
	mi := &file_proto_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMessage) ProtoMessage() {}

func (x *CommitMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMessage.ProtoReflect.Descriptor instead.
func (*CommitMessage) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{8}
}

func (x *CommitMessage) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (x *CommitMessage) GetSenderId() int32 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *CommitMessage) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *CommitMessage) GetSeqNum() int32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *CommitMessage) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CommitMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack         bool             `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	View        int32            `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	SeqNum      int32            `protobuf:"varint,3,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	Digest      string           `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
	Certificate map[int32][]byte `protobuf:"bytes,5,rep,name=certificate,proto3" json:"certificate,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	mi := &file_proto_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{9}
}

func (x *CommitResponse) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (x *CommitResponse) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *CommitResponse) GetSeqNum() int32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *CommitResponse) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CommitResponse) GetCertificate() map[int32][]byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View       int32  `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	ViewLeader int32  `protobuf:"varint,2,opt,name=viewLeader,proto3" json:"viewLeader,omitempty"`
	Timestamp  int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ClientId   int32  `protobuf:"varint,4,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ServerId   int32  `protobuf:"varint,5,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Result     bool   `protobuf:"varint,6,opt,name=result,proto3" json:"result,omitempty"`
	Signature  []byte `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	mi := &file_proto_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{10}
}

func (x *Reply) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *Reply) GetViewLeader() int32 {
	if x != nil {
		return x.ViewLeader
	}
	return 0
}

func (x *Reply) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Reply) GetClientId() int32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *Reply) GetServerId() int32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *Reply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *Reply) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AckMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AckMessage) Reset() {
	*x = AckMessage{}
	mi := &file_proto_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckMessage) ProtoMessage() {}

func (x *AckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckMessage.ProtoReflect.Descriptor instead.
func (*AckMessage) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{11}
}

func (x *AckMessage) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ViewChangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View             int32                `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	ReplicaId        int32                `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	StableCheckpoint int32                `protobuf:"varint,3,opt,name=stable_checkpoint,json=stableCheckpoint,proto3" json:"stable_checkpoint,omitempty"`
	Signature        []byte               `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	SenderId         int32                `protobuf:"varint,5,opt,name=senderId,proto3" json:"senderId,omitempty"`
	Ack              bool                 `protobuf:"varint,6,opt,name=ack,proto3" json:"ack,omitempty"`
	Preprepared      []*PreprepareMessage `protobuf:"bytes,7,rep,name=preprepared,proto3" json:"preprepared,omitempty"`
}

func (x *ViewChangeMessage) Reset() {
	*x = ViewChangeMessage{}
	mi := &file_proto_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewChangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewChangeMessage) ProtoMessage() {}

func (x *ViewChangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewChangeMessage.ProtoReflect.Descriptor instead.
func (*ViewChangeMessage) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{12}
}

func (x *ViewChangeMessage) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *ViewChangeMessage) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *ViewChangeMessage) GetStableCheckpoint() int32 {
	if x != nil {
		return x.StableCheckpoint
	}
	return 0
}

func (x *ViewChangeMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ViewChangeMessage) GetSenderId() int32 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *ViewChangeMessage) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (x *ViewChangeMessage) GetPreprepared() []*PreprepareMessage {
	if x != nil {
		return x.Preprepared
	}
	return nil
}

type NewViewMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack                bool                 `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	View               int32                `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	ViewChanges        []*ViewChangeMessage `protobuf:"bytes,3,rep,name=view_changes,json=viewChanges,proto3" json:"view_changes,omitempty"`
	PrePrepareMessages []*PreprepareMessage `protobuf:"bytes,4,rep,name=pre_prepare_messages,json=prePrepareMessages,proto3" json:"pre_prepare_messages,omitempty"` // PrePrepare messages needed to complete this view
	Signature          []byte               `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	SenderId           int32                `protobuf:"varint,6,opt,name=senderId,proto3" json:"senderId,omitempty"`
}

func (x *NewViewMessage) Reset() {
	*x = NewViewMessage{}
	mi := &file_proto_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewViewMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewViewMessage) ProtoMessage() {}

func (x *NewViewMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewViewMessage.ProtoReflect.Descriptor instead.
func (*NewViewMessage) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{13}
}

func (x *NewViewMessage) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (x *NewViewMessage) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *NewViewMessage) GetViewChanges() []*ViewChangeMessage {
	if x != nil {
		return x.ViewChanges
	}
	return nil
}

func (x *NewViewMessage) GetPrePrepareMessages() []*PreprepareMessage {
	if x != nil {
		return x.PrePrepareMessages
	}
	return nil
}

func (x *NewViewMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *NewViewMessage) GetSenderId() int32 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

type RepeatedViewChangeMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewchangeMsgs    []*ViewChangeMessage `protobuf:"bytes,1,rep,name=viewchangeMsgs,proto3" json:"viewchangeMsgs,omitempty"`
	NewPreprepareMsgs []*PreprepareMessage `protobuf:"bytes,2,rep,name=new_preprepare_msgs,json=newPreprepareMsgs,proto3" json:"new_preprepare_msgs,omitempty"`
}

func (x *RepeatedViewChangeMessages) Reset() {
	*x = RepeatedViewChangeMessages{}
	mi := &file_proto_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedViewChangeMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedViewChangeMessages) ProtoMessage() {}

func (x *RepeatedViewChangeMessages) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedViewChangeMessages.ProtoReflect.Descriptor instead.
func (*RepeatedViewChangeMessages) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{14}
}

func (x *RepeatedViewChangeMessages) GetViewchangeMsgs() []*ViewChangeMessage {
	if x != nil {
		return x.ViewchangeMsgs
	}
	return nil
}

func (x *RepeatedViewChangeMessages) GetNewPreprepareMsgs() []*PreprepareMessage {
	if x != nil {
		return x.NewPreprepareMsgs
	}
	return nil
}

type SyncedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSynced    string                 `protobuf:"bytes,1,opt,name=isSynced,proto3" json:"isSynced,omitempty"`
	CommitedTxn map[int32]*Transaction `protobuf:"bytes,2,rep,name=commitedTxn,proto3" json:"commitedTxn,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BallotNum   int64                  `protobuf:"varint,3,opt,name=ballot_num,json=ballotNum,proto3" json:"ballot_num,omitempty"`
}

func (x *SyncedResponse) Reset() {
	*x = SyncedResponse{}
	mi := &file_proto_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncedResponse) ProtoMessage() {}

func (x *SyncedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncedResponse.ProtoReflect.Descriptor instead.
func (*SyncedResponse) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{15}
}

func (x *SyncedResponse) GetIsSynced() string {
	if x != nil {
		return x.IsSynced
	}
	return ""
}

func (x *SyncedResponse) GetCommitedTxn() map[int32]*Transaction {
	if x != nil {
		return x.CommitedTxn
	}
	return nil
}

func (x *SyncedResponse) GetBallotNum() int64 {
	if x != nil {
		return x.BallotNum
	}
	return 0
}

type CsPrepareMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ClientReq *TransferRequest `protobuf:"bytes,2,opt,name=clientReq,proto3" json:"clientReq,omitempty"`
	CommitMsg []*CommitMessage `protobuf:"bytes,3,rep,name=commitMsg,proto3" json:"commitMsg,omitempty"`
}

func (x *CsPrepareMsg) Reset() {
	*x = CsPrepareMsg{}
	mi := &file_proto_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CsPrepareMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsPrepareMsg) ProtoMessage() {}

func (x *CsPrepareMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsPrepareMsg.ProtoReflect.Descriptor instead.
func (*CsPrepareMsg) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{16}
}

func (x *CsPrepareMsg) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CsPrepareMsg) GetClientReq() *TransferRequest {
	if x != nil {
		return x.ClientReq
	}
	return nil
}

func (x *CsPrepareMsg) GetCommitMsg() []*CommitMessage {
	if x != nil {
		return x.CommitMsg
	}
	return nil
}

type CsCommitMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          string           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ClientReq       *TransferRequest `protobuf:"bytes,2,opt,name=clientReq,proto3" json:"clientReq,omitempty"`
	CommitMsg       []*CommitMessage `protobuf:"bytes,3,rep,name=commitMsg,proto3" json:"commitMsg,omitempty"`
	ConsensusResult bool             `protobuf:"varint,4,opt,name=consensusResult,proto3" json:"consensusResult,omitempty"`
}

func (x *CsCommitMsg) Reset() {
	*x = CsCommitMsg{}
	mi := &file_proto_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CsCommitMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsCommitMsg) ProtoMessage() {}

func (x *CsCommitMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsCommitMsg.ProtoReflect.Descriptor instead.
func (*CsCommitMsg) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{17}
}

func (x *CsCommitMsg) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CsCommitMsg) GetClientReq() *TransferRequest {
	if x != nil {
		return x.ClientReq
	}
	return nil
}

func (x *CsCommitMsg) GetCommitMsg() []*CommitMessage {
	if x != nil {
		return x.CommitMsg
	}
	return nil
}

func (x *CsCommitMsg) GetConsensusResult() bool {
	if x != nil {
		return x.ConsensusResult
	}
	return false
}

type PCCommitMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnCorresponding int32 `protobuf:"varint,1,opt,name=txnCorresponding,proto3" json:"txnCorresponding,omitempty"`
}

func (x *PCCommitMessage) Reset() {
	*x = PCCommitMessage{}
	mi := &file_proto_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PCCommitMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCCommitMessage) ProtoMessage() {}

func (x *PCCommitMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCCommitMessage.ProtoReflect.Descriptor instead.
func (*PCCommitMessage) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{18}
}

func (x *PCCommitMessage) GetTxnCorresponding() int32 {
	if x != nil {
		return x.TxnCorresponding
	}
	return 0
}

type PCAbortMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnCorresponding int32 `protobuf:"varint,1,opt,name=txnCorresponding,proto3" json:"txnCorresponding,omitempty"`
}

func (x *PCAbortMessage) Reset() {
	*x = PCAbortMessage{}
	mi := &file_proto_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PCAbortMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCAbortMessage) ProtoMessage() {}

func (x *PCAbortMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCAbortMessage.ProtoReflect.Descriptor instead.
func (*PCAbortMessage) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{19}
}

func (x *PCAbortMessage) GetTxnCorresponding() int32 {
	if x != nil {
		return x.TxnCorresponding
	}
	return 0
}

type PCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack bool `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *PCResponse) Reset() {
	*x = PCResponse{}
	mi := &file_proto_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCResponse) ProtoMessage() {}

func (x *PCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCResponse.ProtoReflect.Descriptor instead.
func (*PCResponse) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{20}
}

func (x *PCResponse) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

// Print functions
type PrintBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId int32 `protobuf:"varint,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
}

func (x *PrintBalanceRequest) Reset() {
	*x = PrintBalanceRequest{}
	mi := &file_proto_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrintBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintBalanceRequest) ProtoMessage() {}

func (x *PrintBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintBalanceRequest.ProtoReflect.Descriptor instead.
func (*PrintBalanceRequest) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{21}
}

func (x *PrintBalanceRequest) GetClientId() int32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type PrintBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance int64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *PrintBalanceResponse) Reset() {
	*x = PrintBalanceResponse{}
	mi := &file_proto_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrintBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintBalanceResponse) ProtoMessage() {}

func (x *PrintBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintBalanceResponse.ProtoReflect.Descriptor instead.
func (*PrintBalanceResponse) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{22}
}

func (x *PrintBalanceResponse) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type PrintLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*ExecTxn `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *PrintLogResponse) Reset() {
	*x = PrintLogResponse{}
	mi := &file_proto_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrintLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintLogResponse) ProtoMessage() {}

func (x *PrintLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintLogResponse.ProtoReflect.Descriptor instead.
func (*PrintLogResponse) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{23}
}

func (x *PrintLogResponse) GetLogs() []*ExecTxn {
	if x != nil {
		return x.Logs
	}
	return nil
}

type ExecTxn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID   int32        `protobuf:"varint,1,opt,name=TxID,proto3" json:"TxID,omitempty"`
	SeqNum int32        `protobuf:"varint,2,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	Txn    *Transaction `protobuf:"bytes,3,opt,name=txn,proto3" json:"txn,omitempty"`
	Status string       `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ExecTxn) Reset() {
	*x = ExecTxn{}
	mi := &file_proto_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecTxn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecTxn) ProtoMessage() {}

func (x *ExecTxn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecTxn.ProtoReflect.Descriptor instead.
func (*ExecTxn) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{24}
}

func (x *ExecTxn) GetTxID() int32 {
	if x != nil {
		return x.TxID
	}
	return 0
}

func (x *ExecTxn) GetSeqNum() int32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *ExecTxn) GetTxn() *Transaction {
	if x != nil {
		return x.Txn
	}
	return nil
}

func (x *ExecTxn) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type PrintPerformanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalTransactions int64   `protobuf:"varint,1,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions,omitempty"`
	TotalLatency      float32 `protobuf:"fixed32,2,opt,name=total_latency,json=totalLatency,proto3" json:"total_latency,omitempty"`
}

func (x *PrintPerformanceResponse) Reset() {
	*x = PrintPerformanceResponse{}
	mi := &file_proto_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrintPerformanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintPerformanceResponse) ProtoMessage() {}

func (x *PrintPerformanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintPerformanceResponse.ProtoReflect.Descriptor instead.
func (*PrintPerformanceResponse) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{25}
}

func (x *PrintPerformanceResponse) GetTotalTransactions() int64 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *PrintPerformanceResponse) GetTotalLatency() float32 {
	if x != nil {
		return x.TotalLatency
	}
	return 0
}

var File_proto_proto protoreflect.FileDescriptor

var file_proto_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x9f, 0x01,
	0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x79, 0x7a, 0x61, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x8f, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x5c, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x78, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x78, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x78, 0x6e, 0x22,
	0x49, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x50,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61,
	0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x74, 0x78,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x3e, 0x0a,
	0x10, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x01,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xf1, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x26,
	0x0a, 0x0a, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x65, 0x77, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3b, 0x0a,
	0x0c, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x14, 0x70, 0x72,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xa8, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67,
	0x73, 0x12, 0x48, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x0e,
	0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54,
	0x78, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x54, 0x78, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74,
	0x4e, 0x75, 0x6d, 0x1a, 0x52, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54,
	0x78, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x63, 0x73, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x22, 0xb9, 0x01, 0x0a, 0x0b, 0x63,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3d, 0x0a, 0x0f, 0x50, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x78, 0x6e,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x78, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x3c, 0x0a, 0x0e, 0x50, 0x43, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x78, 0x6e, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x74, 0x78, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0x1e, 0x0a, 0x0a, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x61, 0x63, 0x6b, 0x22, 0x31, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x36, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x54, 0x78, 0x6e, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x22, 0x74, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x54, 0x78, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x78, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6e, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x32, 0xfa, 0x06, 0x0a, 0x0e, 0x42, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x15, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2f,
	0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x13, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x52, 0x70,
	0x63, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x11, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x50, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07,
	0x50, 0x43, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x10, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_proto_rawDescOnce sync.Once
	file_proto_proto_rawDescData = file_proto_proto_rawDesc
)

func file_proto_proto_rawDescGZIP() []byte {
	file_proto_proto_rawDescOnce.Do(func() {
		file_proto_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_proto_rawDescData)
	})
	return file_proto_proto_rawDescData
}

var file_proto_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_proto_proto_goTypes = []any{
	(*Empty)(nil),                      // 0: proto.Empty
	(*ServerStatus)(nil),               // 1: proto.ServerStatus
	(*Transaction)(nil),                // 2: proto.Transaction
	(*TransferRequest)(nil),            // 3: proto.TransferRequest
	(*TransactionResponse)(nil),        // 4: proto.TransactionResponse
	(*PreprepareMessage)(nil),          // 5: proto.PreprepareMessage
	(*PrepareMessage)(nil),             // 6: proto.PrepareMessage
	(*PrepareResponse)(nil),            // 7: proto.PrepareResponse
	(*CommitMessage)(nil),              // 8: proto.CommitMessage
	(*CommitResponse)(nil),             // 9: proto.CommitResponse
	(*Reply)(nil),                      // 10: proto.Reply
	(*AckMessage)(nil),                 // 11: proto.AckMessage
	(*ViewChangeMessage)(nil),          // 12: proto.ViewChangeMessage
	(*NewViewMessage)(nil),             // 13: proto.NewViewMessage
	(*RepeatedViewChangeMessages)(nil), // 14: proto.repeatedViewChangeMessages
	(*SyncedResponse)(nil),             // 15: proto.SyncedResponse
	(*CsPrepareMsg)(nil),               // 16: proto.csPrepareMsg
	(*CsCommitMsg)(nil),                // 17: proto.csCommitMsg
	(*PCCommitMessage)(nil),            // 18: proto.PCCommitMessage
	(*PCAbortMessage)(nil),             // 19: proto.PCAbortMessage
	(*PCResponse)(nil),                 // 20: proto.PCResponse
	(*PrintBalanceRequest)(nil),        // 21: proto.printBalanceRequest
	(*PrintBalanceResponse)(nil),       // 22: proto.PrintBalanceResponse
	(*PrintLogResponse)(nil),           // 23: proto.PrintLogResponse
	(*ExecTxn)(nil),                    // 24: proto.execTxn
	(*PrintPerformanceResponse)(nil),   // 25: proto.PrintPerformanceResponse
	nil,                                // 26: proto.PrepareResponse.CertificateEntry
	nil,                                // 27: proto.CommitResponse.CertificateEntry
	nil,                                // 28: proto.SyncedResponse.CommitedTxnEntry
}
var file_proto_proto_depIdxs = []int32{
	2,  // 0: proto.TransferRequest.txn:type_name -> proto.Transaction
	3,  // 1: proto.PreprepareMessage.txn:type_name -> proto.TransferRequest
	26, // 2: proto.PrepareResponse.certificate:type_name -> proto.PrepareResponse.CertificateEntry
	27, // 3: proto.CommitResponse.certificate:type_name -> proto.CommitResponse.CertificateEntry
	5,  // 4: proto.ViewChangeMessage.preprepared:type_name -> proto.PreprepareMessage
	12, // 5: proto.NewViewMessage.view_changes:type_name -> proto.ViewChangeMessage
	5,  // 6: proto.NewViewMessage.pre_prepare_messages:type_name -> proto.PreprepareMessage
	12, // 7: proto.repeatedViewChangeMessages.viewchangeMsgs:type_name -> proto.ViewChangeMessage
	5,  // 8: proto.repeatedViewChangeMessages.new_preprepare_msgs:type_name -> proto.PreprepareMessage
	28, // 9: proto.SyncedResponse.commitedTxn:type_name -> proto.SyncedResponse.CommitedTxnEntry
	3,  // 10: proto.csPrepareMsg.clientReq:type_name -> proto.TransferRequest
	8,  // 11: proto.csPrepareMsg.commitMsg:type_name -> proto.CommitMessage
	3,  // 12: proto.csCommitMsg.clientReq:type_name -> proto.TransferRequest
	8,  // 13: proto.csCommitMsg.commitMsg:type_name -> proto.CommitMessage
	24, // 14: proto.PrintLogResponse.logs:type_name -> proto.execTxn
	2,  // 15: proto.execTxn.txn:type_name -> proto.Transaction
	2,  // 16: proto.SyncedResponse.CommitedTxnEntry.value:type_name -> proto.Transaction
	3,  // 17: proto.BankingService.TransferMoney:input_type -> proto.TransferRequest
	1,  // 18: proto.BankingService.SyncServerStatus:input_type -> proto.ServerStatus
	10, // 19: proto.BankingService.TransferMoneyResponse:input_type -> proto.Reply
	5,  // 20: proto.BankingService.PrePrepare:input_type -> proto.PreprepareMessage
	7,  // 21: proto.BankingService.Prepare:input_type -> proto.PrepareResponse
	9,  // 22: proto.BankingService.Commit:input_type -> proto.CommitResponse
	12, // 23: proto.BankingService.ViewChangeMulticast:input_type -> proto.ViewChangeMessage
	13, // 24: proto.BankingService.NewViewRpc:input_type -> proto.NewViewMessage
	16, // 25: proto.BankingService.CrossShardPrepare:input_type -> proto.csPrepareMsg
	17, // 26: proto.BankingService.CrossShardCommit:input_type -> proto.csCommitMsg
	17, // 27: proto.BankingService.PCCommit:input_type -> proto.csCommitMsg
	17, // 28: proto.BankingService.PCAbort:input_type -> proto.csCommitMsg
	21, // 29: proto.BankingService.PrintBalance:input_type -> proto.printBalanceRequest
	0,  // 30: proto.BankingService.PrintLog:input_type -> proto.Empty
	0,  // 31: proto.BankingService.PrintPerformance:input_type -> proto.Empty
	0,  // 32: proto.BankingService.TransferMoney:output_type -> proto.Empty
	0,  // 33: proto.BankingService.SyncServerStatus:output_type -> proto.Empty
	0,  // 34: proto.BankingService.TransferMoneyResponse:output_type -> proto.Empty
	6,  // 35: proto.BankingService.PrePrepare:output_type -> proto.PrepareMessage
	8,  // 36: proto.BankingService.Prepare:output_type -> proto.CommitMessage
	0,  // 37: proto.BankingService.Commit:output_type -> proto.Empty
	11, // 38: proto.BankingService.ViewChangeMulticast:output_type -> proto.AckMessage
	11, // 39: proto.BankingService.NewViewRpc:output_type -> proto.AckMessage
	0,  // 40: proto.BankingService.CrossShardPrepare:output_type -> proto.Empty
	0,  // 41: proto.BankingService.CrossShardCommit:output_type -> proto.Empty
	20, // 42: proto.BankingService.PCCommit:output_type -> proto.PCResponse
	20, // 43: proto.BankingService.PCAbort:output_type -> proto.PCResponse
	22, // 44: proto.BankingService.PrintBalance:output_type -> proto.PrintBalanceResponse
	23, // 45: proto.BankingService.PrintLog:output_type -> proto.PrintLogResponse
	25, // 46: proto.BankingService.PrintPerformance:output_type -> proto.PrintPerformanceResponse
	32, // [32:47] is the sub-list for method output_type
	17, // [17:32] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_proto_proto_init() }
func file_proto_proto_init() {
	if File_proto_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_proto_goTypes,
		DependencyIndexes: file_proto_proto_depIdxs,
		MessageInfos:      file_proto_proto_msgTypes,
	}.Build()
	File_proto_proto = out.File
	file_proto_proto_rawDesc = nil
	file_proto_proto_goTypes = nil
	file_proto_proto_depIdxs = nil
}
